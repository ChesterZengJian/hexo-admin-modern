{"version":3,"file":"static/js/251.3d913758.chunk.js","mappings":"6HA+BA,IAAe,IAA0B,wD,kNC+FzC,MAxHA,WACI,IAAQA,EAAcC,EAAAA,EAAAA,UACtB,GAAoCC,EAAAA,EAAAA,WAAS,GAAM,eAA5CC,EAAU,KAAEC,EAAa,KAChC,GAA8BF,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAAnCG,EAAO,KAAEC,EAAU,KAEpBC,EAAQ,yCAAG,WAAOC,GAAM,kFACQ,OAA1BC,EAA+BD,EAA/BC,SAAUC,EAAqBF,EAArBE,SAAUC,EAAWH,EAAXG,OAAM,kBAEZC,EAAAA,GAAAA,KAAU,sBAAuB,CAC/CH,SAAAA,EACAC,SAAAA,EACAC,OAAAA,IACD,KAAD,EAJIE,EAAG,OAKTP,EAAWO,EAAIC,MACfC,QAAQC,IAAI,OAAQH,EAAIC,MAAM,uBAEN,OAFM,yBAE9BG,EAAAA,GAAAA,MAAc,wCAAU,2BAK5Bb,GAAc,GAAM,yDACvB,gBAjBa,sCAmBd,OACI,gBAAKc,UAAU,QAAO,SAChBf,GAqDE,SAAC,IAAI,CAACe,UAAU,mBAAkB,UAC9B,SAAC,KAAM,CACHC,OAAO,UACPC,MAAM,uCACNC,UACI,SAAC,IAAU,WACP,UAACrB,EAAS,8FAEN,gBAAKkB,UAAU,cAAa,UACxB,8DACkC,kBAAM,WAC7B,kBAAM,oBAEZb,EAAQI,SAAQ,KAAE,kBAAM,yBAExBJ,EAAQK,UACT,kBAAM,mBACeL,EAAQM,iBAMjDW,MAAO,EACH,SAAC,IAAM,CACHC,KAAK,UAELC,QAAS,WACLpB,GAAc,EAClB,EAAE,iDAHE,iBA9EpB,UAAC,IAAI,CAACc,UAAU,kBAAiB,WAC7B,gBAAKA,UAAU,aAAaO,IAAKC,EAAAA,EAAMC,IAAI,UAC3C,UAAC,IAAI,CACDC,gBAAiB,CAAC,SAAU,YAC5BrB,SAAUA,EAAS,WAEnB,SAAC,SAAS,CACNsB,KAAK,WACLC,MAAO,CACH,CACIC,UAAU,EACVd,QAAS,yCAEf,UAEF,SAAC,IAAK,CAACe,KAAK,QAAQC,YAAY,4CAEpC,SAAC,SAAS,CACNJ,KAAK,WACLC,MAAO,CACH,CACIC,UAAU,EACVd,QAAS,mCAEf,UAEF,SAAC,IAAK,CAACe,KAAK,QAAQC,YAAY,sCAEpC,SAAC,SAAS,CACNJ,KAAK,SACLC,MAAO,CACH,CACIC,UAAU,EACVd,QAAS,+CAEf,UAEF,SAAC,IAAK,CAACe,KAAK,QAAQC,YAAY,kDAEpC,SAAC,SAAS,WACN,SAAC,IAAM,CACHV,KAAK,UACLW,SAAS,SACTF,KAAK,QACLG,OAAK,6DA+CrC,C","sources":["assets/logo.svg","pages/NewAccount/index.js"],"sourcesContent":["var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgLogo(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"\\\\u5716\\\\u5C64_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    width: \"512px\",\n    height: \"512px\",\n    viewBox: \"0 0 512 512\",\n    enableBackground: \"new 0 0 512 512\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#0E83CD\",\n    d: \"M256.4,25.8l-200,115.5L56,371.5l199.6,114.7l200-115.5l0.4-230.2L256.4,25.8z M349,354.6l-18.4,10.7 l-18.6-11V275H200v79.6l-18.4,10.7l-18.6-11v-197l18.5-10.6l18.5,10.8V237h112v-79.6l18.5-10.6l18.5,10.8V354.6z\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgLogo);\nexport default __webpack_public_path__ + \"static/media/logo.cf036680dc93d0fc592fec83d89771dd.svg\";\nexport { ForwardRef as ReactComponent };","import { Card, Form, Input, Button, message, Result, Typography } from 'antd';\r\nimport { useState } from 'react';\r\nimport { http } from '@/utils';\r\nimport logo from '@/assets/logo.svg';\r\nimport './index.scss';\r\n\r\nfunction NewAccount() {\r\n    const { Paragraph } = Typography;\r\n    const [showResult, setShowResult] = useState(false);\r\n    const [account, setAccount] = useState({});\r\n\r\n    const onFinish = async (values) => {\r\n        const { username, password, secret } = values;\r\n        try {\r\n            const res = await http.post('/admin/api/accounts', {\r\n                username,\r\n                password,\r\n                secret,\r\n            });\r\n            setAccount(res.data);\r\n            console.log('res:', res.data);\r\n        } catch (error) {\r\n            message.error('生成账号失败');\r\n            return;\r\n        }\r\n\r\n        // 生成账号弹窗\r\n        setShowResult(true);\r\n    };\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            {!showResult ? (\r\n                <Card className=\"login-container\">\r\n                    <img className=\"login-logo\" src={logo} alt=\"logo\" />\r\n                    <Form\r\n                        validateTrigger={['onBlur', 'onChange']}\r\n                        onFinish={onFinish}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"username\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输入用户名',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input size=\"large\" placeholder=\"请输入用户名\" />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"password\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输入密码',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input size=\"large\" placeholder=\"请输入密码\" />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"secret\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输入加密密钥',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input size=\"large\" placeholder=\"请输入加密密钥\" />\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                size=\"large\"\r\n                                block\r\n                            >\r\n                                生成账号密码\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Card>\r\n            ) : (\r\n                <Card className=\"result-container\">\r\n                    <Result\r\n                        status=\"success\"\r\n                        title=\"成功创建账号\"\r\n                        subTitle={\r\n                            <Typography>\r\n                                <Paragraph>\r\n                                    复制下面代码到 _config.yml 并重启 HEXO.\r\n                                    <pre className=\"result-code\">\r\n                                        <code>\r\n                                            # hexo-admin authentification <br />\r\n                                            admin: <br />\r\n                                            &nbsp;&nbsp;username:\r\n                                            {account.username} <br />\r\n                                            &nbsp;&nbsp;password_hash:\r\n                                            {account.password}\r\n                                            <br />\r\n                                            &nbsp;&nbsp;secret: {account.secret}\r\n                                        </code>\r\n                                    </pre>\r\n                                </Paragraph>\r\n                            </Typography>\r\n                        }\r\n                        extra={[\r\n                            <Button\r\n                                type=\"primary\"\r\n                                key=\"console\"\r\n                                onClick={() => {\r\n                                    setShowResult(false);\r\n                                }}\r\n                            >\r\n                                重新创建账号\r\n                            </Button>,\r\n                        ]}\r\n                    />\r\n                </Card>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NewAccount;\r\n"],"names":["Paragraph","Typography","useState","showResult","setShowResult","account","setAccount","onFinish","values","username","password","secret","http","res","data","console","log","message","className","status","title","subTitle","extra","type","onClick","src","logo","alt","validateTrigger","name","rules","required","size","placeholder","htmlType","block"],"sourceRoot":""}